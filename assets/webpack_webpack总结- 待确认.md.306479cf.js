import{_ as s,c as n,o as a,a as l}from"./app.767d8b40.js";const F=JSON.parse('{"title":"webpack 源码课总结","description":"","frontmatter":{},"headers":[{"level":2,"title":"基础知识","slug":"基础知识","link":"#基础知识","children":[{"level":3,"title":"bundler 打包器","slug":"bundler-打包器","link":"#bundler-打包器","children":[]},{"level":3,"title":"webpack 装逼指南","slug":"webpack-装逼指南","link":"#webpack-装逼指南","children":[]}]},{"level":2,"title":"Loader  和 Plugin","slug":"loader-和-plugin","link":"#loader-和-plugin","children":[{"level":3,"title":"Loader","slug":"loader","link":"#loader","children":[]},{"level":3,"title":"Plugin","slug":"plugin","link":"#plugin","children":[]},{"level":3,"title":"imagemin-webpack-plugin","slug":"imagemin-webpack-plugin","link":"#imagemin-webpack-plugin","children":[]},{"level":3,"title":"clean-webpack-plugin","slug":"clean-webpack-plugin","link":"#clean-webpack-plugin","children":[]},{"level":3,"title":"providePlugin","slug":"provideplugin","link":"#provideplugin","children":[]},{"level":3,"title":"Loader 和 plugin区别 ？","slug":"loader-和-plugin区别","link":"#loader-和-plugin区别","children":[]},{"level":3,"title":"自己写webpack plugin","slug":"自己写webpack-plugin","link":"#自己写webpack-plugin","children":[]}]}],"relativePath":"webpack/webpack总结- 待确认.md"}'),p={name:"webpack/webpack总结- 待确认.md"},e=l(`<h1 id="webpack-源码课总结" tabindex="-1">webpack 源码课总结 <a class="header-anchor" href="#webpack-源码课总结" aria-hidden="true">#</a></h1><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-hidden="true">#</a></h2><h4 id="node-modules的-bin-目录是做啥的" tabindex="-1">node_modules的**.bin**目录是做啥的？ <a class="header-anchor" href="#node-modules的-bin-目录是做啥的" aria-hidden="true">#</a></h4><blockquote><h4 id="executables" tabindex="-1">Executables <a class="header-anchor" href="#executables" aria-hidden="true">#</a></h4><p>When in global mode, executables are linked into <code>{prefix}/bin</code> on Unix, or directly into <code>{prefix}</code> on Windows. Ensure that path is in your terminal&#39;s <code>PATH</code> environment to run them.</p><p>When in local mode, executables are linked into <code>./node_modules/.bin</code> so that they can be made available to scripts run through npm. (For example, so that a test runner will be in the path when you run <code>npm test</code>.)</p></blockquote><p>如果直接在命令行中使用webpack-cli，可以</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span><span style="color:#89DDFF;">/.</span><span style="color:#A6ACCD;">bin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">webpack</span></span>
<span class="line"><span style="color:#A6ACCD;">或</span></span>
<span class="line"><span style="color:#A6ACCD;">npx webpack</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">npx 会在当前目录下的</span><span style="color:#89DDFF;">.</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bin里去查找是否有可执行的命令，没有找到的话再从全局里查找是否有安装对应的模块，全局也没有的话就会自动下载对应的模块，如上面的 create</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">app，npx 会将 create</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">react</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">app 下载到一个临时目录，用完即删，不会占用本地资源。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>而在package.json中scripts可以直接写 webpack, 这就是**.bin目录**的作用。</p><p>babel官网 <a href="https://www.babeljs.cn/docs/babel-parser" target="_blank" rel="noreferrer">@babel/parser模块</a> 也是很大程度上依赖了<a href="https://github.com/acornjs/acorn" target="_blank" rel="noreferrer">acorn</a>，下面为babel官网</p><blockquote><p>Heavily based on <a href="https://github.com/marijnh/acorn" target="_blank" rel="noreferrer">acorn</a> and <a href="https://github.com/RReverser/acorn-jsx" target="_blank" rel="noreferrer">acorn-jsx</a></p></blockquote><p>直接使用webpack、webpack-cli进行打包</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">1. yarn add webpack webpack-cli</span></span>
<span class="line"><span style="color:#A6ACCD;">2. 命令行窗口 </span></span>
<span class="line"><span style="color:#A6ACCD;">./node_modules/.bin/webpack-cli --mode=development ./project_1/index.js</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="bundler-打包器" tabindex="-1">bundler 打包器 <a class="header-anchor" href="#bundler-打包器" aria-hidden="true">#</a></h3><p>实现目标：</p><ol><li><strong>转译</strong>，将一些不兼容的js语法转译为兼容性更好的语法，比如 import/export 转译为 require/module.exports ，ESModule 转为 CommonJs的语法；</li><li><strong>打包</strong>， 将多个文件打包成一个文件。</li></ol><p><strong>过程</strong>： code -&gt; es5Code -&gt; AST-&gt; code2</p><p><strong>文字解释</strong>：利用<strong>babel</strong>一些模块以及<strong>Node</strong>的一些模块，实现各个过程。读取文件，在将code转为AST后, 收集文件的依赖，以及文件的es5Code，并在收集过程中，处理循环依赖这种情况（记录收集过的依赖，收集过的就不再收集）。</p><p>注意：<strong>打包器</strong> 和 <strong>打包器最后输出文件</strong>是两个东西。</p><p>前提： 读写文件利用了nodeJs的fs,path,</p><ol><li><p>code -&gt; es5Code <a href="https://www.babeljs.cn/docs/babel-core" target="_blank" rel="noreferrer">@babel/core</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">babel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transformFromAstSync</span><span style="color:#A6ACCD;">(ast</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> code</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">presets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@babel/preset-env</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>code -&gt; AST <a href="https://www.babeljs.cn/docs/babel-parser" target="_blank" rel="noreferrer">@babel/parser</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ast </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@babel/parser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(code</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">sourceType</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>对AST进行遍历，生成依赖列表 <a href="https://www.babeljs.cn/docs/babel-traverse" target="_blank" rel="noreferrer">@babel/traverse</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">TS 依赖列表的值</span></span>
<span class="line"><span style="color:#A6ACCD;">依赖列表是数组的原因： 为了可以知道顺序，入口文件放在第一个</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DepsRelation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">deps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> traverse </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@babel/traverse</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">traverse</span><span style="color:#A6ACCD;">(ast</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 如果该语法是 import</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ImportDeclaration</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">from的路径</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 按照设计好的依赖列表类型，收集好每一个文件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p>设计最后输出的文件，根据CommonJS2标准，拼接出打包后的 <strong>dist.js</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">require 引入并执行这个文件</span></span>
<span class="line"><span style="color:#A6ACCD;">最后输出的文件格式：</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> depRelation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">deps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">require</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 收集已经require过的依赖</span></span>
<span class="line"><span style="color:#82AAFF;">execute</span><span style="color:#A6ACCD;">(depRelation[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol><p>function execute(key) {} // 根据key，在depRelation中找到对应项，执行它的code</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">技巧：</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">1. 用hash记录已打包过的文件</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">## 源码解析，带着问题看源码</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">看必定执行的代码，定义不看，只有if不看。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">1. webpack-cli 是如何调用 wepack 的</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">\`\`\`js</span></span>
<span class="line"><span style="color:#A6ACCD;">执行这句话，webpack-cli怎么调用webpack的</span></span>
<span class="line"><span style="color:#A6ACCD;">node_modules/.bin/webpack-cli --mode=development project_1/index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">先看.bin/webpack-cli命令 用的哪个文件，然后入口进去找，</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">webpack = require(&#39;webpack&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">compiler = webpack(options, callback)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ol start="2"><li><p>webpack 是如何分析 index.js 的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">验证我们bundler的猜想</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;"> 从问题1中知道了，webpack</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli如何调用webpack的，于是我们就去node_modules的webpack folder</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">然后看package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json的main对应的入口文件是哪一个？</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lib/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> lib</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lazyFunction</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./webpack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> lib</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">webpack</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> compilers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> childOptions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createCompiler</span><span style="color:#A6ACCD;">(options))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> compiler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MultiCompiler</span><span style="color:#A6ACCD;">(compilers)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">createCompiler</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">并没有找到index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">如何执行 code </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> es5Code </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> ast </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> code2 这个流程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">发现定义了很多</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">hooks </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">eventName</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SyncHook</span><span style="color:#A6ACCD;">([])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">eventName</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xxx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">tapable 这是 webpack 团队为了写 webpack 而写的一个事件</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">钩子库</span></span>
<span class="line"><span style="color:#A6ACCD;">用法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">定义一个事件</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">钩子</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">eventName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SyncHook</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">arg1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">arg2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">监听一个事件</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">钩子</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">eventName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">监听理由</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fn)</span></span>
<span class="line"><span style="color:#A6ACCD;">触发一个事件</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">钩子</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">eventName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">arg1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">arg2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div></li><li><p>webpack 的流程是怎样的？（无法直接找到webpack如何去分析打包index.js文件，转而去看webpack的流程）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">重新回到 webpack</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">lib</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js 进行分析，主要是收集触发了哪些hook（钩子）</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">以及主要事件</span></span>
<span class="line"><span style="color:#A6ACCD;">environment</span></span>
<span class="line"><span style="color:#A6ACCD;">afterEnvironment</span></span>
<span class="line"><span style="color:#A6ACCD;">initialize</span></span>
<span class="line"><span style="color:#A6ACCD;">beforeRun</span></span>
<span class="line"><span style="color:#A6ACCD;">run</span></span>
<span class="line"><span style="color:#89DDFF;">--this.</span><span style="color:#A6ACCD;">readRecords</span></span>
<span class="line"><span style="color:#89DDFF;">--this.</span><span style="color:#82AAFF;">compile</span><span style="color:#A6ACCD;">(onCompiled)</span></span>
<span class="line"><span style="color:#A6ACCD;">beforeCompile</span></span>
<span class="line"><span style="color:#A6ACCD;">compile</span></span>
<span class="line"><span style="color:#A6ACCD;">make</span></span>
<span class="line"><span style="color:#A6ACCD;">finishMake</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextTick</span></span>
<span class="line"><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;">compilation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">finish</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">finishModules</span></span>
<span class="line"><span style="color:#89DDFF;">------</span><span style="color:#A6ACCD;">compilation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">seal</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">seal</span></span>
<span class="line"><span style="color:#A6ACCD;">beforeChunks</span></span>
<span class="line"><span style="color:#89DDFF;">---this.</span><span style="color:#A6ACCD;">addChunk</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">buildChunkGraph</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#A6ACCD;"> chunkGraphInit)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">afterChunks</span></span>
<span class="line"><span style="color:#A6ACCD;">shouldRecord</span></span>
<span class="line"><span style="color:#A6ACCD;">reviveModules</span></span>
<span class="line"><span style="color:#A6ACCD;">beforeModuleIds</span></span>
<span class="line"><span style="color:#A6ACCD;">moduleIds</span></span>
<span class="line"><span style="color:#A6ACCD;">reviveChunks</span></span>
<span class="line"><span style="color:#A6ACCD;">beforeChunkIds</span></span>
<span class="line"><span style="color:#A6ACCD;">chunkIds</span></span>
<span class="line"><span style="color:#A6ACCD;">beforeModuleHash</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> 	</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">createModuleHashes</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">afterModuleHash</span></span>
<span class="line"><span style="color:#A6ACCD;">beforeCodeGeneration</span></span>
<span class="line"><span style="color:#89DDFF;">--this.</span><span style="color:#A6ACCD;">codeGeneration</span></span>
<span class="line"><span style="color:#A6ACCD;">afterCodeGeneration</span></span>
<span class="line"><span style="color:#A6ACCD;">beforeRuntimeRequirements</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">createChunkAssets</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cont</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">processAssets</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">summarizeDependencies</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">afterSeal</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">fileSystemInfo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">logStatistics</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">afterCompile 执行传进来的callback（onCompiled）函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextTick</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">emitAssets</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">emitRecords</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">done</span></span>
<span class="line"><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">cache</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">storeBuildDependencies</span></span>
<span class="line"><span style="color:#89DDFF;">------</span><span style="color:#A6ACCD;">finalCallback</span></span>
<span class="line"><span style="color:#A6ACCD;">afterDone</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">收集了webpack的大概hook</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">以及一些流程中的主要函数，但并没有我们想要的答案</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">我们想要的是</span></span>
<span class="line"><span style="color:#A6ACCD;">code </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> ast </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> code2 的在哪里执行的，根据目前我们收集到的钩子函数，</span></span>
<span class="line"><span style="color:#A6ACCD;">猜测在compile </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> afterCompile阶段进行了这些操作，所以我们去看他的钩子监听 xxx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tap</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div></li><li><p>读取 index.js 并分析和收集依赖是在哪个阶段？</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">上面收集的hooks以及主要函数，让我们大概了解了webpack的结构以及阶段，</span></span>
<span class="line"><span style="color:#A6ACCD;">根据猜测，主要去查看 compile </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> afterCompile的钩子的tap，主要是传了callback函数的，这样才能持续完成后续的操作；</span></span>
<span class="line"><span style="color:#A6ACCD;">compile</span></span>
<span class="line"><span style="color:#A6ACCD;">make</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> EntryPlugin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createDependency</span><span style="color:#A6ACCD;">(entry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> 收集依赖</span></span>
<span class="line"><span style="color:#A6ACCD;">finishMake</span></span>
<span class="line"><span style="color:#A6ACCD;">afterCompile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">我们发现 make </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> finishMake 之间什么代码都没有啊！只有一个类似收集依赖的函数</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>make - finishMake 之间，做了什么 Optimize 优化</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">compile</span></span>
<span class="line"><span style="color:#89DDFF;">--this.</span><span style="color:#82AAFF;">newCompilation</span><span style="color:#A6ACCD;">(params)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">thisCompilation</span></span>
<span class="line"><span style="color:#A6ACCD;">compilation</span></span>
<span class="line"><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;"> compilation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">addEntry</span></span>
<span class="line"><span style="color:#A6ACCD;">entryData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#F07178;">dependencies</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#F07178;">includeDependencies</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">					</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">					</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">options</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 依赖，很像我们自己定义的收集依赖函数</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> addEntry</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_addEntryItem</span></span>
<span class="line"><span style="color:#A6ACCD;">addEntry</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">addModuleChain</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">dependencyFactories</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(Dep)</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">handleModuleCreation</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">factorizeModule</span></span>
<span class="line"><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">factorizeQueue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">add</span></span>
<span class="line"><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;"> factory</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">create 找到 </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">factorizeQueue的创建，发现</span></span>
<span class="line"><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;"> _factorizeModule factory  </span><span style="color:#89DDFF;">---&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">dependencyFactories</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(Dep) tip1</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">addModule</span></span>
<span class="line"><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">addModuleQueue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">add</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">buildModule</span></span>
<span class="line"><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">buildQueue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">add</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">processModuleDependencies</span></span>
<span class="line"><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">processDependenciesQueue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">add</span></span>
<span class="line"><span style="color:#A6ACCD;">succeedEntry</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">任务队列知识，任务队列发现有任务会自动执行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">tip1</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">dependencyFactories</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(Dep) 是个啥？</span></span>
<span class="line"><span style="color:#A6ACCD;">你搜 compilation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tap 就知道，它是 normalModuleFactory，简称 nmf</span></span>
<span class="line"><span style="color:#A6ACCD;">结论：factory 就是 nmf，所以 factory</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">create 就是 nmf</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">craete</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div></li><li><p>nmf.create 做了什么？</p></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">来到 NormalModuleFactory</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js，可以看到 create 的代码</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="webpack-装逼指南" tabindex="-1">webpack 装逼指南 <a class="header-anchor" href="#webpack-装逼指南" aria-hidden="true">#</a></h3><ol><li>阅读了webpack 源码</li><li>webpack 使用 Tapable 作为事件中心，将打包分为 env,compile,make sewal,emit等阶段</li><li>在make阶段借助acorn对源码进行了parse</li></ol><h2 id="loader-和-plugin" tabindex="-1">Loader 和 Plugin <a class="header-anchor" href="#loader-和-plugin" aria-hidden="true">#</a></h2><h3 id="loader" tabindex="-1">Loader <a class="header-anchor" href="#loader" aria-hidden="true">#</a></h3><p>官网解释：</p><blockquote><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 <a href="https://webpack.docschina.org/concepts/modules" target="_blank" rel="noreferrer">模块</a>，以供应用程序使用，以及被添加到依赖图中。</p></blockquote><p>比如不能识别CSS文件，所以需要引用Css-loader。主要集中在编译阶段。</p><h4 id="自己实现一个css-loader。" tabindex="-1">自己实现一个CSS-Loader。 <a class="header-anchor" href="#自己实现一个css-loader。" aria-hidden="true">#</a></h4><p><strong>关键点</strong>： 把css转为js。js文件中转，css文件代码转为字符串，然后在写入的时候，用dom操作，添加到html文件中。</p><p><strong>注意</strong>：css中会有属性选择器，会有双引号，如果直接用<code>&quot;\${code}&quot;</code>反引号+双引号进行包裹的话，最后写的文件会出问题，所以用**<code>\${JSON.stringify(code)}</code>**,JSON.stringify会对双引号进行转义。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">css</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(path)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">const str = </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(code)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">		if(document) {</span></span>
<span class="line"><span style="color:#C3E88D;">			const style = document.createElement(&#39;style&#39;)</span></span>
<span class="line"><span style="color:#C3E88D;">			style.innerHTML = str</span></span>
<span class="line"><span style="color:#C3E88D;">			document.head.appendChild(style)</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"><span style="color:#C3E88D;">export default str</span></span>
<span class="line"><span style="color:#C3E88D;">	</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>loader可以是一个函数，</p><p>css-loader 就是把上面的代码单独封装在一个文件里面，导出方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">css</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">loader</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> transform </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">	const str = </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(code)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">	if(document) {</span></span>
<span class="line"><span style="color:#C3E88D;">const style = document.createElement(&#39;style&#39;)</span></span>
<span class="line"><span style="color:#C3E88D;">style.innerHTML = str</span></span>
<span class="line"><span style="color:#C3E88D;">document.head.appendChild(style)</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"><span style="color:#C3E88D;">export default str</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> transform</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">bundler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">css</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(path)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./css-loader.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)(</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">)   </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="单一职责原则" tabindex="-1">单一职责原则 <a class="header-anchor" href="#单一职责原则" aria-hidden="true">#</a></h4><p>webpack里每个loader只做一件事，方便组合。</p><p>而上面的代码<strong>做了两件事</strong>，<strong>第一是css-&gt;js</strong>， <strong>第二是添加到head里面</strong>。拆分为css-loader、style-loader。但我们无法实现style-loader，因为<strong>style-loader是插入代码</strong>，需要寻找插入时机和插入位置。</p><p>如果是sassLoader,lessLoader -&gt; cssLoader 这样过程一直是转译，但style-loader是接收到css-loader transform后的代码，并添加插入逻辑。</p><p>拆分后的代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">css</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">loader </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> tranform </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">	const str = </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(code)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">	export default str</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> transform</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">stule</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">loader</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> tranform </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">	if(document) {</span></span>
<span class="line"><span style="color:#C3E88D;">const style = document.createElement(&#39;style&#39;)</span></span>
<span class="line"><span style="color:#C3E88D;">style.innerHTML = </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(code)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">document.head.appendChild(style)</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> transform</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">code </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./css-loader.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)(code)</span></span>
<span class="line"><span style="color:#A6ACCD;">code </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./style-loader.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)(code)</span></span>
<span class="line"><span style="color:#A6ACCD;">但这样的话，最后打包输出的结果</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">const str = </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">body{color: red}</span><span style="color:#A6ACCD;">\\&quot;\\&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">const str = </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">body{color: red}</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">输出的了多余的代码，这样就会有问题</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="plugin" tabindex="-1">Plugin <a class="header-anchor" href="#plugin" aria-hidden="true">#</a></h3><p>官网解释</p><blockquote><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p></blockquote><p>在某两个阶段中间插入进去,考虑在哪个阶段执行，全局阶段基本都可以。</p><h3 id="imagemin-webpack-plugin" tabindex="-1">imagemin-webpack-plugin <a class="header-anchor" href="#imagemin-webpack-plugin" aria-hidden="true">#</a></h3><ol><li>使用</li><li>源码，监听emit事件，对compilation.assets进行遍历，如果是图片的话，就对图片进行压缩</li></ol><h3 id="clean-webpack-plugin" tabindex="-1">clean-webpack-plugin <a class="header-anchor" href="#clean-webpack-plugin" aria-hidden="true">#</a></h3><ol><li>使用</li><li>emit，确定开始编译之前，清除之前的文件</li><li>done，删除不需要的临时文件</li></ol><h3 id="provideplugin" tabindex="-1">providePlugin <a class="header-anchor" href="#provideplugin" aria-hidden="true">#</a></h3><p>全局使用一个变量，不需要引入，直接用就好了，会自动在使用到变量的文件自动引入。</p><p>在哪个阶段开始做呢？</p><p>该 插件直接监听的是nmf</p><p>compilation阶段，获取nmf, parse之后, 在ast遍历的时候进行处理</p><h3 id="loader-和-plugin区别" tabindex="-1">Loader 和 plugin区别 ？ <a class="header-anchor" href="#loader-和-plugin区别" aria-hidden="true">#</a></h3><p>loader主要是在make阶段</p><p>plugin对webpack的每个阶段进行介入，丰富webpack的能力，基于事件机制工作，监听web pack的 打包过程中每个阶段函数</p><h3 id="自己写webpack-plugin" tabindex="-1">自己写webpack plugin <a class="header-anchor" href="#自己写webpack-plugin" aria-hidden="true">#</a></h3><p>官方文档 write plugin</p><p>主要是按照官方文档格式，以及考虑需求，要监听什么阶段的事件？，以及要做什么？</p>`,62),o=[e];function r(c,t,i,D,y,C){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{F as __pageData,b as default};
